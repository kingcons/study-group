; the linear recursive process
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))

; the linear iteritive Processes
(define (factorial n)
  (fact-iter 1 1 n))

(define (fact-iter product counter max-count)
  (if (> counter max-count)
      product
      (fact-iter (* counter product)
                 (+ counter 1)
                 max-count)))

; Exercise 1.9: Each of the following two procedures defines a method for
; adding two positive integers in terms of the procedures inc, which increments
; its argument by 1, and dec, which decrements its argument by 1.

(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

; Using the substitution model, illustrate the process generated by each
; procedure in evaluating (+ 4 5). Are these processes iterative or recursive?

; #1
(+ 4 5)
(inc (+ 3 5))
(inc (+ 3 (inc (+ 2 5))))
(inc (+ 3 (inc (+ 2 (inc (+ 1 5))))))
(inc (+ 3 (inc (+ 2 (inc (+ 1 (inc (+ 0 5))))))))
(inc (+ 3 (inc (+ 2 (inc (+ 1 6))))))
(inc (+ 3 (inc (+ 2 7))))
(inc (+ 3 8))
(9)
; This process is recursive.

; #2
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
(9)
; This process is iterative.

; Exercise 1.10: The following procedure computes a mathematical function
; called Ackermann’s function.

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

; What are the values of the following expressions?
; #1
(A 1 10)
(A (- 1 1) (A 1 9))
(A (- 1 1) (A (- 1 1) (A 1 8)))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 7))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 6)))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 5))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 4)))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 3))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 2)))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 1))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 2)))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 4))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 8)))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 16))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 32)))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (0 64)))))
(A (- 1 1) (A (- 1 1) (A 0 128)))
(A (- 1 1) (A 0 256))
(A 0 512)
(1024)
; The value is 1024

; #2
(A 2 4)
(A (- 2 1) (A 2 3))
(A (- 2 1) (A (- 2 1) (A 2 2)))
(A (- 2 1) (A (- 2 1) (A (- 2 1) (A 2 1))))
(A (- 2 1) (A (- 2 1) (A 1 2)))
(A (- 2 1) (A (- 2 1) (A (- 1 1) (A 1 1))))
(A (- 2 1) (A (- 2 1) (A 0 2)))
(A (- 2 1) (A 1 4))
(A (- 2 1) (A (- 1 1) (A 1 3)))
(A (- 2 1) (A (- 1 1) (A (- 1 1) (A 1 2))))
(A (- 2 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 1)))))
(A (- 2 1) (A (- 1 1) (A (- 1 1) (A 0 2))))
(A (- 2 1) (A (- 1 1) (A 0 4)))
(A (- 2 1) (A 0 8))
(A 1 16)
(A (- 1 1) (A 1 15))
(A (- 1 1) (A (- 1 1) (A 1 14)))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 13))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 12)))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 11))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 10)))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 9))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 8)))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 7))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 6)))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 5))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 4)))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 3))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 2)))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 1))))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 2)))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 4))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 8)))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 16))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 32)))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 64))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 128)))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 256))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 512)))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 1024))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 2048)))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 4096))))
(A (- 1 1) (A (- 1 1) (A 0 8192)))
(A (- 1 1) (A 0 16384))
(A 0 32768)
(65536)
; The value is 65536

; #3
(A 3 3)
(A (- 3 1) (A 3 2))
(A (- 3 1) (A (- 3 1) (A 3 1)))
(A (- 3 1) (A 2 2))
(A (- 3 1) (A (- 2 1) (A 2 1)))
(A (- 3 1) (A 1 2))
(A (- 3 1) (A (- 1 1) (A 1 1)))
(A (- 3 1) (A 0 2))
(A 2 4)
; WHEW!! SEE ABOVE. The value is 65536
(A (- 2 1) (A 2 3))
(A (- 2 1) (A (- 2 1) (A 2 2)))
(A (- 2 1) (A (- 2 1) (A (- 2 1) (A 2 1))))
(A (- 2 1) (A (- 2 1) (A 1 2)))
(A (- 2 1) (A (- 2 1) (A (- 1 1) (A 1 1))))
(A (- 2 1) (A (- 2 1) (A 0 2)))
(A (- 2 1) (A 1 4))
(A (- 2 1) (A (- 1 1) (A 1 3)))
(A (- 2 1) (A (- 1 1) (A (- 1 1) (A 1 2))))
(A (- 2 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 1)))))
(A (- 2 1) (A (- 1 1) (A (- 1 1) (A 0 2))))
(A (- 2 1) (A (- 1 1) (A 0 4)))
(A (- 2 1) (A 0 8))
(A 1 16)
(A (- 1 1) (A 1 15))
(A (- 1 1) (A (- 1 1) (A 1 14)))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 13))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 12)))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 11))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 10)))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 9))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 8)))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 7))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 6)))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 5))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 4)))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 3))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 2)))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 1))))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 2)))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 4))))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 8)))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 16))))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 32)))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 64))))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 128)))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 256))))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 512)))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 1024))))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 2048)))))
(A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 4096))))
(A (- 1 1) (A (- 1 1) (A 0 8192)))
(A (- 1 1) (A 0 16384))
(A 0 32768)
(65536)
; Thevalue is 65536


; Exercise 1.12: The following pattern of numbers is called Pascal’s triangle.

;         1
;       1   1
;     1   2   1
;   1   3   3   1
; 1   4   6   4   1
;       . . .
; The numbers at the edge of the triangle are all 1, and each number inside
; the triangle is the sum of the two numbers above it.35 Write a procedure that
; computes elements of Pascal’s triangle by means of a recursive process.

(define (pascal row column) 
  (cond ((= column 0) 1)
        ((= column row) 1)
        (else (+
                (pascal (- row 1) 
                  (- column 1))
                (pascal (- row 1) 
                  column)))))
